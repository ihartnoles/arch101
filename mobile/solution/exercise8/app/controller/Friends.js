/*
 * File: app/controller/Friends.js
 *
 * This file was generated by Sencha Architect version 2.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.1.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('FriendsWithBeer.controller.Friends', {
    extend: 'Ext.app.Controller',

    config: {
        models: [
            'Friend'
        ],
        stores: [
            'Friends'
        ],

        refs: {
            friendsView: 'tabpanel > #friends',
            btnAddFriend: 'button#btnAddFriend',
            btnBackToFriendList: 'button#btnBackToFriendList ',
            friendForm: 'formpanel#friendForm'
        },

        control: {
            "btnAddFriend": {
                tap: 'onBtnAddFriendTap'
            },
            "button#btnSaveContact": {
                tap: 'onBtnSaveContactTap'
            },
            "list#friendsList": {
                itemtap: 'onFriendsListItemTap'
            },
            "button#btnDeleteContact": {
                tap: 'onBtnDeleteContactTap'
            }
        }
    },

    onBtnAddFriendTap: function(button, e, eOpts) {
        this.getFriendForm().setRecord(
        Ext.create('FriendsWithBeer.model.Friend')
        );
        this.getFriendForm().reset();
        this.onGoToForm();

    },

    onBtnSaveContactTap: function(button, e, eOpts) {
        // update model instance with data from form
        var form = button.up('formpanel');
        var rec = form.getRecord();
        rec.set(form.getValues());

        // validate model
        var errors = rec.validate();

        if (!errors.isValid()) {
            // at least one error occurred
            var errorMsg = "";
            console.log(errors);
            errors.each(function (errorObj) {
                errorMsg += errorObj.getField() + " " + errorObj.getMessage() + "<br>"; 
            });
            Ext.Msg.alert("Doh!", errorMsg);
        } else {
            // check to see if new record
            if (rec.phantom) {
                Ext.getStore('Friends').add(rec);
            } 
            // commit changes  
            Ext.getStore('Friends').sync();
            this.onGoToList();
        }
    },

    onFriendsListItemTap: function(dataview, index, target, record, e, eOpts) {
        this.getFriendForm().setRecord(record);
        this.onGoToForm();

    },

    onBtnDeleteContactTap: function(button, e, eOpts) {
        var rec = this.getFriendForm().getRecord();
        if (!rec.phantom) {
            Ext.getStore('Friends').remove(rec);
        }
        Ext.getStore('Friends').sync();
        this.onGoToList();
    },

    onGoToForm: function() {
        // hide add button
        this.getBtnAddFriend().setHidden(true);
        // show "back" button
        this.getBtnBackToFriendList().setHidden(false);
        // toggle the view
        this.getFriendsView().setActiveItem(1);
    },

    onGoToList: function() {
        // show add button
        this.getBtnAddFriend().setHidden(false);
        // hide back button
        this.getBtnBackToFriendList().setHidden(true);
        // toggle visability of the list view
        this.getFriendsView().setActiveItem(0);
    }

});